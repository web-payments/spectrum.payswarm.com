#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    spectrum.payswarm.com

    Wireless devices such as mobile phones, laptops, and routers use 
    radio spectrum to communicate with one another. This spectrum is 
    often statically allocated and fairly fixed in the way it is 
    deployed. This static allocation usually leads to unfortunate 
    quality of service issues in heavily utilized areas such as 
    conference halls, city centers, or mass-transport terminals.

    One approach to addressing the quality of service problem is to 
    allow radios to purchase additional or alternative bandwidth 
    channels using a dynamic spectrum marketplace.

    A dynamic spectrum marketplace is space in which wireless 
    spectrum can be allocated, purchased, and sold. The goal of 
    these sorts of marketplaces is to ensure efficient usage of 
    spectrum usage through the use of market forces to sell spectrum 
    to the highest bidder.

    This website is a demonstration of a dynamic spectrum marketplace. 
    It uses the PaySwarm open standards to express identity, licenses, 
    digital contracts, and blocks of spectrum for sale. All purchases 
    for the spectrum are performed using the PaySwarm standard as well.

    :copyright: (c) 2013 by Digital Bazaar
    :license: BSD, see LICENSE for more details.
"""

import os.path
from sqlite3 import dbapi2 as sqlite3
from flask import Flask, request, session, g, redirect, url_for, abort, \
     render_template, flash, _app_ctx_stack

# configuration
DATABASE = os.path.join(os.path.dirname(__file__), 'spectrum.db')
DEBUG = True

# Spectrum marketplace application
app = Flask(__name__)
app.config.from_object(__name__)
app.config.from_envvar('SPECTRUMD_SETTINGS', silent=True)

def init_db():
    """Creates the database tables."""
    with app.app_context():
        db = get_db()
        with app.open_resource('schema.sql', mode='r') as f:
            db.cursor().executescript(f.read())
        db.commit()


def get_db():
    """Opens a new database connection if there is none yet for the
    current application context.
    """
    top = _app_ctx_stack.top
    if not hasattr(top, 'sqlite_db'):
        sqlite_db = sqlite3.connect(app.config['DATABASE'])
        sqlite_db.row_factory = sqlite3.Row
        top.sqlite_db = sqlite_db

    return top.sqlite_db


@app.teardown_appcontext
def close_db_connection(exception):
    """Closes the database again at the end of the request."""
    top = _app_ctx_stack.top
    if hasattr(top, 'sqlite_db'):
        top.sqlite_db.close()


@app.route('/')
def show_homepage():
    return render_template('index.html')


if __name__ == '__main__':
    init_db()
    app.run()
